using System;

public class Test
{
	public static void Main()
	{
		linkedList<int> list = new linkedList<int>();
		list.Add(1);
	    list.Add(2);
	    list.Add(3);
	    list.Add(4);
	    list.Add(5);
	    list.reverse();
		list.printList();
	}
	
}

public class linkedList<T>{
    Node<T> head=null;
    
    public void printList(){
        Node<T> current=head;
        while(current!=null){
            Console.WriteLine(current.data);
            current = current.next;
        }
    }
    
    public void Add(T item){
        if(item!=null){
            if(head==null){
                head = new Node<T>(item, null);
            }
            else{
            getLastNode().next = new Node<T>(item, null);
            }
        }
    }
    public void Delete(T item){
        if(item!=null){
            Node<T> current=head;
            Node<T> prev=null;
            if(current.next==null && current.data.Equals(item)){
                head=null;
                return;
            }
            if(current.next!=null && current.data.Equals(item)){
                head = head.next;
                return;
            }
            while(!current.data.Equals(item) && current.next!=null){
                prev=current;
                current=current.next;
            }
            if(current.data.Equals(item) && current.next==null){
                prev.next=null;
                return;
            }
            else{
                prev.next = current.next;
                current.next=null;
            }

        }
    }
    
    public void reverse(){
         Node<T> current = head;
         Node<T> prev = null;
         Node<T> next = null;
         while(current!=null){
             next = current.next;
             current.next=prev;
             prev=current;
             current=next;
         }
         head = prev;
    }
    
    public Node<T> getLastNode(){
        Node<T> temp=head;
        if(temp==null){
            return head;
        }
        while(temp.next!=null){
            temp = temp.next;
        }
        return temp;
    }
    
}

public sealed class Node<T>{
    public T data;
    public Node<T> next=null;
    
    public Node(T item, Node<T> next){
        this.data=item;
        this.next=next;
    }
    
}
