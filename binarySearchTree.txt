using System;
using System.Collections.Generic;

public class Test
{
	public static void Main()
	{
	    BSTNode root=null;
        BSTree tree = new BSTree();
        root = tree.insert(root,15);
        root = tree.insert(root,10);
        root = tree.insert(root,20);
        root = tree.insert(root,25);
        root = tree.insert(root,8);
        root = tree.insert(root,12);
        root = tree.insert(root,11);
        if(tree.search(root, 10)==true){
            Console.WriteLine("Found");
        }
        else{
            Console.WriteLine("Not Found");
        }
        int height = tree.FindHeight(root);
        Console.WriteLine(height);
        Console.WriteLine(tree.isBST(root, int.MinValue, int.MaxValue));
	}
}

public class BSTNode{
    public int data;
    public BSTNode left;
    public BSTNode right;
}

public class BSTree{
    public BSTNode root;
    
    public BSTNode getNewBSTNode(int data){
        BSTNode bstNode = new BSTNode();
        bstNode.data=data;
        bstNode.left=null;
        bstNode.right=null;
        return bstNode;
    }
    
    public BSTNode insert(BSTNode root, int data){
        if(root==null){
            root=getNewBSTNode(data);
        }
        else if(data<=root.data){
            root.left = insert(root.left, data);
        }
        else{
            root.right= insert(root.right, data);
        }
        return root;
    }
    
    public BSTNode insertdirectly(BSTNode root, int data){
        BSTNode temp = root;
        while(temp.left!=null){
            temp = temp.left;
        }
        BSTNode node =getNewBSTNode(data);
        temp.left = node;
        return root;
    }
    
    public bool search(BSTNode root, int data){
        if(root==null)
            return false;
        else if(root.data==data)
            return true;
        else if(data<=root.data)
            return search(root.left, data);
        else
            return search(root.right,data);
    }
    
    //The height of the binary tree is number of edges from the root node to the leaf node in the longest path
    public int FindHeight(BSTNode root){
        if(root==null){
            return -1;
        }
        int leftTreeHeight = FindHeight(root.left);
        int rightTreeHeight = FindHeight(root.right);
        return Math.Max(leftTreeHeight, rightTreeHeight) + 1;
    }
    
    public void LevelOrderTraversal(BSTNode root){
        if(root==null) return;
        Queue<BSTNode> queue = new Queue<BSTNode>();
        queue.Enqueue(root);
        while(queue.Count!=0){
            BSTNode current = queue.Dequeue();
            Console.WriteLine(current.data);
            if(current.left!=null)
                queue.Enqueue(current.left);
            if(current.right!=null)
                queue.Enqueue(current.right);
        }
    }
    
    public void PreOrderTraversal(BSTNode root){
        if(root==null) return;
        Console.WriteLine(root.data);
        PreOrderTraversal(root.left);
        PreOrderTraversal(root.right);
    }
    
    public bool isBST(BSTNode root, int minValue, int maxValue){
        if(root==null) return true;
        if(root.data > minValue && root.data < maxValue && isBST(root.left, minValue, root.data)
            && isBST(root.right, root.data, maxValue)){
                return true;
            }
        else{
            return false;
        }
    }
    
    public BSTNode Delete(BSTNode root, int value){
        if(root==null) return root;
        else if(root.data<value)
            root.left = Delete(root.left, value);
        else if(root.data>value)
            root.right = Delete(root.right, value);
        else{
            if(root.left==null && root.right==null){
                root=null;
            }
            if(root.left==null){
                BSTNode temp = root;
                root = root.right;
                temp=null;
            }
            if(root.right==null){
                BSTNode temp=root;
                root = root.left;
                temp=null;
            }
            else{
                BSTNode temp = FindMin(root.right);
                root.data=temp.data;
                root.right = Delete(root.right, temp.data);
            }
        }
        return root;
    }
}
