using System;

public class Test
{
	public static void Main()
	{
	    BSTNode root=null;
	    BSTNode node=null;
        BSTree tree = new BSTree();
        root = tree.insert(root,15);
        node=root;
        node = tree.insert(node,10);
        node = tree.insert(node,20);
        node = tree.insert(node,25);
        node = tree.insert(node,8);
        node = tree.insert(node,12);
        if(tree.search(root, 10)==true){
            Console.WriteLine("Found");
        }
        else{
            Console.WriteLine("Not Found");
        }
        int height = tree.FindHeight(root);
        Console.WriteLine(height);
	}
}

public class BSTNode{
    public int data;
    public BSTNode left;
    public BSTNode right;
}

public class BSTree{
    public BSTNode root;
    
    public BSTNode getNewBSTNode(int data){
        BSTNode bstNode = new BSTNode();
        bstNode.data=data;
        bstNode.left=null;
        bstNode.right=null;
        return bstNode;
    }
    
    public BSTNode insert(BSTNode root, int data){
        if(root==null){
            root=getNewBSTNode(data);
        }
        else if(data<=root.data){
            root.left = insert(root.left, data);
        }
        else{
            root.right= insert(root.right, data);
        }
        return root;
    }
    
    public bool search(BSTNode root, int data){
        if(root==null)
            return false;
        else if(root.data==data)
            return true;
        else if(data<=root.data)
            return search(root.left, data);
        else
            return search(root.right,data);
    }
    
    //The height of the binary tree is number of edges from the root node to the leaf node in the longest path
    public int FindHeight(BSTNode root){
        if(root==null){
            return -1;
        }
        int leftTreeHeight = FindHeight(root.left);
        int rightTreeHeight = FindHeight(root.right);
        return Math.Max(leftTreeHeight, rightTreeHeight);
    }
}
