using System;
using System.Collections.Generic;
using System.Linq;

public class Test
{
	public static void Main()
	{
		    var g = new Graph();
            
            g.AddEdge(1, 2);
            g.AddEdge(1, 3);
            g.AddEdge(1, 4);
            
            g.AddEdge(2, 5);
            g.AddEdge(2, 6);
            g.AddEdge(4, 7);   
            g.AddEdge(4, 8);
            
            g.AddEdge(5, 9);
            g.AddEdge(5, 10);
            g.AddEdge(7, 11);
            g.AddEdge(7, 12);
            
            g.DFSWithRecursion(1);
	}
}

public class Graph{
            public Graph()
            {
                Adj = new Dictionary<int, HashSet<int>>();
            }
            
            public Dictionary<int, HashSet<int>> Adj {get; private set;}
            
            public void AddEdge(int source, int target)
            {
                if (Adj.ContainsKey(source))
                {
                    try 
                    {
                        Adj[source].Add(target);
                    }
                    catch
                    {
                        Console.WriteLine("This edge already exists: " + source + " to " + target);
                    }
                }
                else
                {
                    var hs = new HashSet<int>();
                    hs.Add(target);
                    Adj.Add(source, hs);
                }
            }
            
            public void DFSWithRecursion(int vertex)
            {
                var visited = new HashSet<int>();
                Traverse(vertex, visited);
            }
            
            private void Traverse(int v, HashSet<int> visited)
            {
                // Mark this node as visited
                visited.Add(v);
                Console.WriteLine(v);
                // Only if the node has a any adj notes
                if (Adj.ContainsKey(v))
                {
                    // Iterate through UNVISITED nodes
                    foreach(int neighbour in Adj[v].Where(a => !visited.Contains(a)))
                    {
                        Traverse(neighbour, visited);
                    }
                }
            }
            
            public void BFSWithRecursion(int vertex)
            {
                var visited = new HashSet<int>();
                Traverse(vertex, visited);
            }
            
            private void Traverse(int v, HashSet<int> visited)
            {
                // Mark this node as visited
                visited.Add(v);
                Console.WriteLine(v);
                // Only if the node has a any adj notes
                if (Adj.ContainsKey(v))
                {
                    // Iterate through UNVISITED nodes
                    foreach(int neighbour in Adj[v].Where(a => !visited.Contains(a)))
                    {
                        Traverse(neighbour, visited);
                    }
                }
            }

}
